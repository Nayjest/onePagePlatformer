// Generated by CoffeeScript 1.3.3
(function() {

  require(['components/require/require', 'components/Vector2d/Vector2d', 'components/mixin/lib/mixin', 'keyboard', 'Map', 'GameObject', 'DynamicGameObject', 'behaviors/Layer', 'behaviors/WallCollisions', 'behaviors/Gravity', 'behaviors/PlatformerWalker', 'behaviors/presenters/SlopeOnWalk', 'behaviors/controllers/PlatformerWalkerAI', 'behaviors/controllers/PlatformerKeyboard', 'behaviors/PlatformerJump', 'behaviors/CollisionCheck', 'behaviors/Moving', 'behaviors/Size', 'behaviors/Shooter', 'resources', 'settings', 'components/graphics/lib/layers/dom/DomRectLayer', 'GameObjectCollection', 'components/underscore/underscore'], function(require, Vector2d, mixin, keyboard, Map, GameObject, DynamicGameObject, Layer, WallCollisions, Gravity, PlatformerWalker, SlopeOnWalk, PlatformerWalkerAI, PlatformerKeyboardController, PlatformerJump, CollisionCheck, Moving, Size, Shooter, resources, settings, DomRectLayer, GameObjectCollection) {
    var createEnemy, enemies, gameLoop, intervalTime, map, mapLayer, objDefaults, player, unitDefaults, wallDefaults;
    keyboard.init();
    mapLayer = new DomRectLayer({
      color: '#EEEEEE'
    });
    objDefaults = {
      size: settings.cellSize,
      cellSize: settings.cellSize,
      css: {
        outline: 'none'
      }
    };
    wallDefaults = _.defaults({
      parent: mapLayer
    }, objDefaults);
    map = new Map(resources.map1, resources.objDictionary, function(config, pos, map) {
      var cfg;
      cfg = _.extend({}, config, wallDefaults);
      cfg.pos = pos.substract(map.size.clone().divideScalar(2)).addScalar(0.5).multiply(settings.cellSize);
      return new DomRectLayer(cfg);
    });
    mapLayer.size.set(map.size.clone().multiply(settings.cellSize));
    mapLayer.redraw();
    unitDefaults = _.defaults({
      map: map
    }, objDefaults);
    Layer.defaults = {
      layerClass: DomRectLayer,
      layerConfig: objDefaults
    };
    enemies = new GameObjectCollection();
    player = new DynamicGameObject(_.extend({
      behaviors: [PlatformerKeyboardController, PlatformerWalker, PlatformerJump, WallCollisions, Shooter, Gravity, SlopeOnWalk, Size, CollisionCheck],
      checkCollision: {
        objects: enemies,
        handler: function(obj) {
          return this.die();
        }
      }
    }, unitDefaults));
    player.type = 'player';
    player.die = function() {
      return player.pos.setValues(0, 0);
    };
    player.createBullet = function(pos, direction) {
      var bullet;
      bullet = new DynamicGameObject({
        pos: this.pos,
        speed: direction,
        size: {
          x: 1,
          y: 1
        },
        layer: new DomRectLayer({
          color: 'orange',
          size: {
            x: 10,
            y: 2
          },
          css: {
            outline: 'none'
          }
        })
      });
      bullet.speed.multiplyScalar(20);
      bullet.speed.y = (Math.random() - 0.5) * 2;
      bullet.config.checkCollision = {
        objects: enemies,
        handler: function(obj) {
          obj.destructor();
          return this.destructor();
        }
      };
      bullet.use(CollisionCheck);
      return bullet.use(Size);
    };
    createEnemy = function() {
      var enemySpawnPoint, unit;
      enemySpawnPoint = map.size.clone().multiply({
        x: 0,
        y: -0.5
      }).multiply(settings.cellSize);
      console.log(enemySpawnPoint);
      unit = new DynamicGameObject(_.extend({
        pos: enemySpawnPoint,
        walkSpeed: 1 + Math.random() * 4,
        layer: new DomRectLayer(_.extend({
          color: '#ff00ee'
        }, objDefaults)),
        behaviors: [PlatformerWalkerAI, PlatformerJump, WallCollisions, Gravity, Layer, Size]
      }, unitDefaults));
      enemies.push(unit);
      return unit;
    };
    mapLayer.redraw();
    intervalTime = 1000 / 60;
    gameLoop = function() {
      var unit, _i, _len, _ref, _results;
      _ref = DynamicGameObject.collection;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        if (unit) {
          if ((Math.abs(unit.pos.y) > mapLayer.size.y / 2) || (Math.abs(unit.pos.x) > mapLayer.size.x / 2)) {
            if (unit.type === "player") {
              unit.die();
            } else {
              unit.destructor();
            }
          }
          unit.update();
          _results.push(unit.layer.redraw());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    setInterval(gameLoop, intervalTime);
    createEnemy();
    createEnemy();
    createEnemy();
    setInterval(function() {
      if (Math.random() < 0.39) {
        return createEnemy();
      }
    }, 500);
    window.objects = DynamicGameObject.collection;
    return window.enemies = enemies;
  });

}).call(this);
