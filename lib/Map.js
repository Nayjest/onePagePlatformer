// Generated by CoffeeScript 1.3.3
(function() {

  define(['components/Vector2D/Vector2D'], function(Vector2D) {
    /*
      Game map
      limitations: 1 object per grid cell
    */

    var Map;
    return Map = (function() {

      function Map(grid, objDictionary, construct) {
        var code, obj, row, x, y, _i, _j, _len, _len1;
        this.size = new Vector2D(grid[0].length, grid.length);
        this.grid = [];
        this.objects = [];
        for (y = _i = 0, _len = grid.length; _i < _len; y = ++_i) {
          row = grid[y];
          this.grid.push([]);
          for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
            code = row[x];
            if (objDictionary[code]) {
              obj = construct(objDictionary[code], new Vector2D(x, y), this);
              this.grid[y][x] = obj;
              this.objects.push(obj);
            }
          }
        }
      }

      Map.prototype.getObjectsByDist = function(pos, dist) {
        var maxX, maxY, minX, minY, objects, x, y, _i, _j;
        if (dist == null) {
          dist = 1;
        }
        objects = [];
        minX = Math.max(0, pos.x - dist);
        maxX = Math.min(this.size.x - 1, pos.x + dist);
        minY = Math.max(0, pos.y - dist);
        maxY = Math.min(this.size.y - 1, pos.y + dist);
        for (y = _i = minY; minY <= maxY ? _i <= maxY : _i >= maxY; y = minY <= maxY ? ++_i : --_i) {
          if (this.grid[y]) {
            for (x = _j = minX; minX <= maxX ? _j <= maxX : _j >= maxX; x = minX <= maxX ? ++_j : --_j) {
              if (this.grid[y][x]) {
                objects.push(this.grid[y][x]);
              }
            }
          }
        }
        return objects;
      };

      return Map;

    })();
  });

}).call(this);
