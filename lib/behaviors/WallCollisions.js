// Generated by CoffeeScript 1.3.3
(function() {

  define(['components/Vector2D/Vector2D', 'behaviors/CalcMapPosition', 'behaviors/Moving', 'components/underscore/underscore'], function(Vector2D, CalcMapPosition, Moving) {
    var WallCollisions;
    return WallCollisions = (function() {

      WallCollisions.name = 'wallCollisions';

      WallCollisions.single = true;

      function WallCollisions(model) {
        this.model = model;
        this.model.use(CalcMapPosition);
        this.model.use(Moving);
        this.model.onGround = false;
        this._clearCollisions();
      }

      WallCollisions.prototype._clearCollisions = function() {
        return this.model.collisions = {
          top: false,
          left: false,
          right: false,
          bottom: false
        };
      };

      WallCollisions.prototype.update = function() {
        var dist, pos, wPos, wall, walls, _i, _len;
        this._clearCollisions();
        pos = this.model.pos.clone();
        walls = this.model.map.getObjectsByDist(this.model.calcMapPos(), 1);
        this.model.onGround = false;
        for (_i = 0, _len = walls.length; _i < _len; _i++) {
          wall = walls[_i];
          wPos = wall.pos.clone();
          dist = wPos.clone().substract(pos);
          if (Math.abs(dist.x) > Math.abs(dist.y)) {
            if (Math.abs(dist.x) < this.model.cellSize.x) {
              if (dist.x > 0) {
                this.model.collisions.right = true;
                pos.x = wPos.x - this.model.cellSize.x;
              } else {
                this.model.collisions.left = true;
                pos.x = wPos.x + this.model.cellSize.x;
              }
            }
          } else {
            if (Math.abs(dist.y) < this.model.cellSize.y) {
              if (dist.y > 0) {
                this.model.collisions.bottom = true;
                if (this.model.speed.y > 0) {
                  this.model.speed.y = 0;
                }
                this.model.onGround = true;
                pos.y = wPos.y - this.model.cellSize.y;
              } else {
                this.model.collisions.top = true;
                pos.y = wPos.y + this.model.cellSize.y;
              }
            }
          }
        }
        return this.model.pos.set(pos);
      };

      return WallCollisions;

    })();
  });

}).call(this);
